#Updates:
    Requires: DocID, Detail to be changed
    .updateOne/Many({filter: value}, {$set: {hobbies: [{//this array will be overwritten}]}})

#Increment
        ({name: "Manual"},{$inc: {age: 1}})
        inc and set simultaneously couldn't be used

#$min, $max, $mul
    change values if lets say new value lower than existing value
    $mul - multiplies fields with given nos.

#Getting rid of fields:
    db.users.updateMany({isSporty: true}, {$unset: {phone: ""}})
    - will remove all the phone fields for the documents with isSporty == true;

#Rename:
    .updateMany({}.{$rename: {age: "totalAge"}})

#upsert
    Passed along with updateOne/Many to insert the filtering data, if it doesn't exist

#Arrays:
    users.find({$and: [{"hobbies.title": "Sports"},{"hobbies.frequency": {$gte: 3}}]}).pretty();    
    This however doesn't returns results of an atomic array element, the correct method would be:

    users.find({hobbies: {$elementMatch: {title: "Spots", frequency: {$gte: 3}}}})
    Now this will match up to the single element with both the given params.

    #Using the query to perform update operations:
    users.updateMany({hobbies: {$elementMatch: {title: "Spots", frequency: {$gte: 3}}}}, {$set: {"hobbbies.$.highFrequency": true}})
    //highFrequency: true: field added now, to the documents.

#Left at lec 11/
